
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/chip_io/src/sky130_fd_io__top_power_lvc_wpad.v
Parsing SystemVerilog input from `/openLANE_flow/designs/chip_io/src/sky130_fd_io__top_power_lvc_wpad.v' to AST representation.
Generating RTLIL representation for module `\sky130_fd_io__top_power_lvc_wpad'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/roshan/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.ref/sky130_fd_io/verilog/sky130_ef_io.v
Parsing SystemVerilog input from `/home/roshan/Desktop/vsdflow/work/tools/openlane_working_dir/pdks/sky130A/libs.ref/sky130_fd_io/verilog/sky130_ef_io.v' to AST representation.
Generating RTLIL representation for module `\sky130_ef_io__vccd_hvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vccd_lvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vdda_lvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vdda_hvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vddio_lvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vddio_hvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vssd_lvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vssd_hvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vssio_lvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vssio_hvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vssa_lvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__vssa_hvc_pad'.
Generating RTLIL representation for module `\sky130_ef_io__corner_pad'.
Generating RTLIL representation for module `\sky130_fd_io__com_bus_slice'.
Generating RTLIL representation for module `\sky130_ef_io__com_bus_slice_1um'.
Generating RTLIL representation for module `\sky130_ef_io__com_bus_slice_5um'.
Generating RTLIL representation for module `\sky130_ef_io__com_bus_slice_10um'.
Generating RTLIL representation for module `\sky130_ef_io__com_bus_slice_20um'.
Generating RTLIL representation for module `\sky130_ef_io__gpiov2_pad'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openLANE_flow/designs/chip_io/src/chip_io.v
Parsing SystemVerilog input from `/openLANE_flow/designs/chip_io/src/chip_io.v' to AST representation.
Generating RTLIL representation for module `\sky130_fd_io__top_ground_hvc_wpad'.
Generating RTLIL representation for module `\sky130_fd_io__top_ground_lvc_wpad'.
Generating RTLIL representation for module `\sky130_fd_io__top_power_hvc_wpadv2'.
Generating RTLIL representation for module `\sky130_fd_io__top_gpiov2'.
Generating RTLIL representation for module `\chip_io'.
Successfully finished Verilog frontend.

4. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/chip_io/runs/02-12_05-11/tmp/synthesis/hierarchy.dot'.
Dumping module chip_io to page 1.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \chip_io

5.2. Analyzing design hierarchy..
Top module:  \chip_io
Removed 0 unused modules.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \chip_io

6.1.2. Analyzing design hierarchy..
Top module:  \chip_io
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).

6.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

6.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.3. Executing FLATTEN pass (flatten design).

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..
Removed 10 unused cells and 4 unused wires.
<suppressed ~14 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
checking module chip_io..
Warning: multiple conflicting drivers for chip_io.\TIE_LO_ESD:
    port TIE_LO_ESD[0] of cell B_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell B_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell EN_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell EN_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_0_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_1_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_2_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_3_PAD (sky130_fd_io__top_gpiov2)
Warning: multiple conflicting drivers for chip_io.\TIE_HI_ESD:
    port TIE_HI_ESD[0] of cell B_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell B_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell EN_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell EN_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_0_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_1_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_2_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_3_PAD (sky130_fd_io__top_gpiov2)
Warning: Wire chip_io.\VCO_IN_pll is used but has no driver.
Warning: Wire chip_io.\REF_CLK_pll is used but has no driver.
Warning: Wire chip_io.\VDDIO is used but has no driver.
Warning: Wire chip_io.\VSSA1 is used but has no driver.
Warning: Wire chip_io.\VCCD1 is used but has no driver.
Warning: Wire chip_io.\VSSD1 is used but has no driver.
found and reported 8 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \chip_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \chip_io.
Performed a total of 0 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.7.9. Rerunning OPT passes. (Maybe there is more to do..)

6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \chip_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \chip_io.
Performed a total of 0 changes.

6.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.7.13. Executing OPT_DFF pass (perform DFF optimizations).

6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.7.16. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \chip_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \chip_io.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.9.9. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).

6.11. Executing PEEPOPT pass (run peephole optimizers).

6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module chip_io:
  created 0 $alu and 0 $macc cells.

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \chip_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \chip_io.
Performed a total of 0 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.15.6. Executing OPT_DFF pass (perform DFF optimizations).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.15.9. Finished OPT passes. (There is nothing left to do.)

6.16. Executing MEMORY pass.

6.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.
<suppressed ~6 debug messages>

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.18.3. Executing OPT_DFF pass (perform DFF optimizations).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \chip_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \chip_io.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.20.6. Executing OPT_SHARE pass.

6.20.7. Executing OPT_DFF pass (perform DFF optimizations).

6.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.20.10. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~67 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.22.3. Executing OPT_DFF pass (perform DFF optimizations).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.22.5. Finished fast OPT passes.

6.23. Executing ABC pass (technology mapping using ABC).

6.23.1. Extracting gate netlist of module `\chip_io' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.24. Executing OPT pass (performing simple optimizations).

6.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

6.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

6.24.3. Executing OPT_DFF pass (perform DFF optimizations).

6.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

6.24.5. Finished fast OPT passes.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \chip_io

6.25.2. Analyzing design hierarchy..
Top module:  \chip_io
Removed 0 unused modules.

6.26. Printing statistics.

=== chip_io ===

   Number of wires:                 41
   Number of wire bits:             41
   Number of public wires:          41
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     sky130_fd_io__top_gpiov2        8
     sky130_fd_io__top_power_lvc_wpad      1

6.27. Executing CHECK pass (checking for obvious problems).
checking module chip_io..
Warning: multiple conflicting drivers for chip_io.\TIE_LO_ESD:
    port TIE_LO_ESD[0] of cell B_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell B_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell EN_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell EN_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_0_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_1_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_2_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_3_PAD (sky130_fd_io__top_gpiov2)
Warning: multiple conflicting drivers for chip_io.\TIE_HI_ESD:
    port TIE_HI_ESD[0] of cell B_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell B_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell EN_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell EN_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_0_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_1_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_2_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_3_PAD (sky130_fd_io__top_gpiov2)
found and reported 2 problems.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \chip_io..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \chip_io.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\chip_io'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module chip_io.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..
Removed 0 unused cells and 8 unused wires.
<suppressed ~8 debug messages>

10. Printing statistics.

=== chip_io ===

   Number of wires:                 33
   Number of wire bits:             33
   Number of public wires:          33
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     sky130_fd_io__top_gpiov2        8
     sky130_fd_io__top_power_lvc_wpad      1

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_4 (noninv, pins=3, area=23.77) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_4 (noninv, pins=4, area=28.78) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_4 (noninv, pins=4, area=30.03) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_4 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_4 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_4 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

11.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\chip_io':

12. Printing statistics.

=== chip_io ===

   Number of wires:                 33
   Number of wire bits:             33
   Number of public wires:          33
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     sky130_fd_io__top_gpiov2        8
     sky130_fd_io__top_power_lvc_wpad      1

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\chip_io' to `/tmp/yosys-abc-KayJ3R/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

14. Executing SETUNDEF pass (replace undef values with defined constants).

15. Executing HILOMAP pass (mapping to constant drivers).

16. Executing SPLITNETS pass (splitting up multi-bit signals).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \chip_io..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

18. Executing INSBUF pass (insert buffer cells for connected wires).

19. Executing CHECK pass (checking for obvious problems).
checking module chip_io..
Warning: multiple conflicting drivers for chip_io.\TIE_LO_ESD:
    port TIE_LO_ESD[0] of cell B_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell B_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell EN_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell EN_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_0_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_1_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_2_PAD (sky130_fd_io__top_gpiov2)
    port TIE_LO_ESD[0] of cell GPIO_3_PAD (sky130_fd_io__top_gpiov2)
Warning: multiple conflicting drivers for chip_io.\TIE_HI_ESD:
    port TIE_HI_ESD[0] of cell B_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell B_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell EN_CP_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell EN_VCO_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_0_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_1_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_2_PAD (sky130_fd_io__top_gpiov2)
    port TIE_HI_ESD[0] of cell GPIO_3_PAD (sky130_fd_io__top_gpiov2)
Warning: Wire chip_io.\VCO_IN_pll is used but has no driver.
Warning: Wire chip_io.\REF_CLK_pll is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$340 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$338 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$336 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$334 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$332 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$330 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$328 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$326 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$324 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$322 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$320 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$318 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$316 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$314 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$312 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$310 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$308 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$306 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$304 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$302 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$300 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$298 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$296 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$294 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$292 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$290 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$288 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$286 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$284 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$282 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$280 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$278 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$276 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$274 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$272 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$270 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$268 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$266 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$264 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$262 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$260 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$258 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$256 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$254 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$252 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$250 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$248 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$246 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$244 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$242 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$240 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$238 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$236 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$234 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$232 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$230 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$228 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$226 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$224 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$222 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$220 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$218 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$216 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$214 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$212 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$210 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$208 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$206 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$204 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$202 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$200 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$198 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$196 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$194 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$192 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$190 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$188 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$186 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$184 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$182 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$180 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$178 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$176 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$174 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$172 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$170 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$168 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$166 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$164 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$162 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$160 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$158 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$156 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$154 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$152 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$150 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$148 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$146 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$144 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$142 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$140 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$138 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$136 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$134 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$132 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$130 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$128 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$126 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$124 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$122 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$120 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$118 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$116 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$114 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$112 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$110 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$108 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$106 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$104 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$102 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$100 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$98 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$96 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$94 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$92 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$90 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$88 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$86 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$84 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$82 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$80 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$78 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$76 is used but has no driver.
Warning: Wire chip_io.$auto$hilomap.cc:47:hilomap_worker$74 is used but has no driver.
found and reported 138 problems.

20. Printing statistics.

=== chip_io ===

   Number of wires:                167
   Number of wire bits:            167
   Number of public wires:          33
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                145
     sky130_fd_io__top_gpiov2        8
     sky130_fd_io__top_power_lvc_wpad      1
     sky130_fd_sc_hd__conb_1       136

   Area for cell type \sky130_fd_io__top_power_lvc_wpad is unknown!
   Area for cell type \sky130_fd_io__top_gpiov2 is unknown!

   Chip area for module '\chip_io': 510.489600

21. Executing Verilog backend.
Dumping module `\chip_io'.

Warnings: 142 unique messages, 148 total
End of script. Logfile hash: 20fc04eb72, CPU: user 0.30s system 0.04s, MEM: 44.38 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 61% 4x stat (0 sec), 10% 7x read_verilog (0 sec), ...
